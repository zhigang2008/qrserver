; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "地震烈度监测速报系统"
#define MyAppVersion "2.0"
#define MyAppPublisher "地壳应力研究所"
#define MyAppURL "http://www.eq-icd.cn"
#define MyAppExeName "dqs.exe"
#define MyServerMgrApp "ServerMgr.exe"
#define RegisterName "DqsServer"
#define ServiceName_server "DQS_Server"
#define ServiceName_database "DQS_MongoDB"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{1474DE4B-3E1F-4801-94BE-384CC89C574C}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\dqs
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
InfoBeforeFile=readme.txt
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes
ShowLanguageDialog=auto
AppMutex=dqs_server_instance
SetupIconFile=F:\go_workspace\src\dqs\extendprojects\installfiles\ico\ico_128X128.ico
VersionInfoVersion={#MyAppVersion}
VersionInfoProductVersion={#MyAppVersion}
ArchitecturesInstallIn64BitMode=x64

[Languages]
Name: "chinese"; MessagesFile: "compiler:Languages\chinese.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
;[64 bit files]
Source: "F:\go_workspace\src\dqs\dqs.exe"; DestDir: "{app}\server"; DestName: "dqs.exe"; Flags: ignoreversion; Components: main; Check: IsWin64
Source: "F:\go_workspace\src\dqs\socket.dll"; DestDir: "{app}\server"; DestName: "socket.dll"; Flags: ignoreversion; Components: main; Check: IsWin64
Source: "F:\go_workspace\src\dqs\ServerMgr64.exe"; DestDir: "{app}"; DestName: "ServerMgr.exe"; Flags: ignoreversion; Components: main; Check: IsWin64
Source: "D:\mongodb64\bin\*"; DestDir: "{app}\database\bin"; Flags: ignoreversion; Components: database
;[32 bit files]
Source: "F:\go_workspace\src\dqs\dqs.exe"; DestDir: "{app}\server"; Flags: ignoreversion solidbreak; Components: main; Check: not IsWin64
Source: "F:\go_workspace\src\dqs\socket.dll"; DestDir: "{app}\server"; Flags: ignoreversion; Components: main; Check: not IsWin64
Source: "F:\go_workspace\src\dqs\ServerMgr.exe"; DestDir: "{app}"; Flags: ignoreversion; Components: main; Check: not IsWin64
Source: "D:\mongodb\bin\*"; DestDir: "{app}\database\bin"; Flags: ignoreversion; Components: database; Check: not IsWin64
;[32&64 bit files]
Source: "F:\go_workspace\src\dqs\seelog.xml"; DestDir: "{app}\server"; Flags: ignoreversion solidbreak; Components: main
Source: "F:\go_workspace\src\dqs\server-original.xml"; DestDir: "{app}\server"; Flags: ignoreversion; Components: main
Source: "F:\go_workspace\src\dqs\conf\app-original.conf"; DestDir: "{app}\server\conf"; Flags: ignoreversion recursesubdirs createallsubdirs; Components: main
Source: "F:\go_workspace\src\dqs\static\*"; DestDir: "{app}\server\static"; Flags: ignoreversion recursesubdirs createallsubdirs; Components: main
Source: "F:\go_workspace\src\dqs\views\*.html"; DestDir: "{app}\server\views"; Flags: ignoreversion recursesubdirs createallsubdirs; Components: main
Source: "F:\go_workspace\src\dqs\extendprojects\installfiles\data\init-user.json"; DestDir: "{app}\data"; Components: database
Source: "F:\go_workspace\src\dqs\extendprojects\installfiles\data\init-device.json"; DestDir: "{app}\data"; Components: database
Source: "F:\go_workspace\src\dqs\extendprojects\installfiles\changelog.txt"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\mongodb\GNU-AGPL-3.0"; DestDir: "{app}\database"; Flags: ignoreversion; Components: database
Source: "D:\mongodb\README"; DestDir: "{app}\database"; Flags: ignoreversion; Components: database
Source: "D:\mongodb\THIRD-PARTY-NOTICES"; DestDir: "{app}\database"; Flags: ignoreversion; Components: database

[Icons]
;Name: "{group}\{#MyAppName}管理器"; Filename: "{app}\{#MyServerMgrApp}"; WorkingDir: "{app}"; IconFilename: "{app}\{#MyServerMgrApp}"; IconIndex: 0
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
;Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyServerMgrApp}"; WorkingDir: "{app}"; IconFilename: "{app}\{#MyServerMgrApp}"; IconIndex: 0;  Tasks: desktopicon

[Run]
;Filename: "{app}\server\{#MyAppExeName}"; Parameters: "start"; Flags: nowait postinstall skipifsilent; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"
;Filename: "{app}\server\{#MyAppExeName}"; Parameters: "install"; WorkingDir: "{app}\server"; Flags: postinstall runascurrentuser shellexec skipifdoesntexist; Description: "安装主程序的系统服务"; Components: main
;Filename: "{app}\database\bin\mongod.exe"; Parameters: "--install --serviceName MongoDB --serviceDisplayName ""DQS MongoDB"" --dbpath ""{app}\data"" --dbpath ""{app}\logs\mongodb.log"" --directoryperdb"; WorkingDir: "{app}\database\bin"; Flags: postinstall shellexec skipifdoesntexist; Description: "DQS速报平台 mongodb的服务"; Components: database
Filename: "{app}\changelog.txt"; WorkingDir: "{app}"; Flags: nowait postinstall shellexec skipifdoesntexist unchecked; Description: "查看程序变更信息"
;Filename: "{app}\ServerMgr.exe"; WorkingDir: "{app}"; Flags: nowait shellexec postinstall skipifdoesntexist; Description: "运行{#MyAppName}管理器"

[Components]
Name: "main"; Description: "主程序(必选)"; Types: compact custom full; Flags: fixed
Name: "database"; Description: "MongoDB数据库";  Types: full

[Dirs]
Name: "{app}\database"; Components: database
Name: "{app}\database\bin"; Components: database
Name: "{app}\data"; Components: database
Name: "{app}\data\logs"; Components: database
Name: "{app}\server\logs"

[UninstallDelete]
Type: files; Name: "{app}\{#MyAppName}.url"
Type: files; Name: "{app}\server\server.xml"
Type: files; Name: "{app}\server\conf\app.conf"

[Registry]
Root: "HKLM"; Subkey: "SOFTWARE\{#RegisterName}"; ValueType: string; ValueName: "version"; ValueData: "{#MyAppVersion}"; Flags: uninsdeletekey
Root: "HKLM"; Subkey: "SOFTWARE\{#RegisterName}"; ValueType: dword; ValueName: "database"; ValueData: "1"; Flags: uninsdeletekey; Components: database
Root: "HKLM"; Subkey: "SOFTWARE\{#RegisterName}"; ValueType: string; ValueName: "installDir"; ValueData: "{app}"; Flags: uninsdeletekey
;Root: "HKLM"; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Run"; ValueType: string; ValueName: "DQS Server"; ValueData: """{app}\{#MyServerMgrApp}"""; Flags: uninsdeletevalue

[Messages]
chinese.BeveledLabel=地壳应力研究所

[UninstallRun]
Filename: "{app}\server\{#MyAppExeName}"; Parameters: "stop"; WorkingDir: "{app}\server\logs"; Flags: waituntilterminated runhidden shellexec; Components: main
Filename: "{app}\server\{#MyAppExeName}"; Parameters: "remove"; WorkingDir: "{app}\server\logs"; Flags: waituntilterminated runhidden shellexec; Components: main
Filename: "{app}\database\bin\mongod.exe"; Parameters: "--remove --serviceName {#ServiceName_database}"; WorkingDir: "{app}\database\bin"; Flags: waituntilterminated shellexec runhidden; Components: database

[InstallDelete]
Type: files; Name: "{app}\data\init-user.json"
Type: files; Name: "{app}\data\init-device.json"

[Code]
var
       myPage:TwizardPage;
       lb_serverHost,lb_serverPort,lb_databaseHost,lb_databasePort:TLabel;
       ed_serverHost,ed_serverPort,ed_databaseHost,ed_databasePort:TEdit;
       ck_HTTP: TCheckBox ;
       lb_httpPort  :TLabel;
       ed_httpPort  :TEdit;

procedure ClickCHK(Sender:TObject);
begin
       if ck_HTTP.Checked then
          begin
              lb_httpPort.Visible:=True;
              ed_httpPort.Visible:=True;
           end
       else
           begin
              lb_httpPort.Visible:=False;
              ed_httpPort.Visible:=False;
           end
end;

procedure InitializeWizard();
begin
       myPage:=CreateCustomPage(wpSelectComponents, '服务器参数设置', '请设定该服务器运行参数');
   
       lb_serverHost:=TLabel.Create(myPage);
       lb_serverHost.Parent:=myPage.Surface;
       lb_serverHost.Caption:='服务地址(默认置空):';
       lb_serverHost.Width:=120;
       lb_serverHost.ShowHint:=True;
       lb_serverHost.Hint:='此项可以默认留空,系统会使用当前服务器的所有可用IP地址';

       
       lb_serverPort:=TLabel.Create(myPage);
       lb_serverPort.Parent:=myPage.Surface;
       lb_serverPort.Caption:='服务端口:';
       lb_serverPort.Top:=lb_serverHost.Top+lb_serverHost.Height+20;
       lb_serverPort.Width:=120;
       
       lb_databaseHost:=TLabel.Create(myPage);
       lb_databaseHost.Parent:=myPage.Surface;
       lb_databaseHost.Caption:='数据库地址:';
       lb_databaseHost.Top:=lb_serverPort.Top+lb_serverPort.Height+20;
       lb_databaseHost.Width:=120;
       
       lb_databasePort:=TLabel.Create(myPage);
       lb_databasePort.Parent:=myPage.Surface;
       lb_databasePort.Top:=lb_databaseHost.Top+lb_databaseHost.Height+20;
       lb_databasePort.Caption:='数据库端口:';
       lb_databasePort.Width:=120;
       
       ed_serverHost:=TEdit.Create(myPage);
       ed_serverHost.Parent:=myPage.Surface;
       ed_serverHost.Left:=lb_serverHost.Left+lb_serverHost.Width+20;
       ed_serverHost.Top:= lb_serverHost.Top;

       ed_serverPort:=TEdit.Create(myPage);
       ed_serverPort.Parent:=myPage.Surface;
       ed_serverPort.Left:=ed_serverHost.Left;
       ed_serverPort.Top:= lb_serverPort.Top;
       ed_serverPort.Text:='8089';

       ed_databaseHost:=TEdit.Create(myPage);
       ed_databaseHost.Parent:=myPage.Surface;
       ed_databaseHost.Left:=ed_serverHost.Left;
       ed_databaseHost.Top:= lb_databaseHost.Top;
       ed_databaseHost.Text:='127.0.0.1';

       ed_databasePort:=TEdit.Create(myPage);
       ed_databasePort.Parent:=myPage.Surface;
       ed_databasePort.Left:=ed_serverHost.Left;
       ed_databasePort.Top:= lb_databasePort.Top;
       ed_databasePort.Text:='27017';

       ck_HTTP:= TCheckBox.Create(myPage);
       ck_HTTP.Parent:=myPage.Surface;
       ck_HTTP.Top:= lb_databasePort.Top+lb_databasePort.Height+20;
       ck_HTTP.Left:=  lb_databasePort.Left;
       ck_HTTP.Caption:='启用本地HTTP Server';
       ck_HTTP.Width:=200;
       ck_HTTP.Checked:=true;
       ck_HTTP.OnClick:=@ClickCHK;

       lb_httpPort:=TLabel.Create(myPage);
       lb_httpPort.Parent:=myPage.Surface;
       lb_httpPort.Top:=ck_HTTP.Top+ck_HTTP.Height+20;
       lb_httpPort.Caption:='HTTP 服务端口:';
       lb_httpPort.Width:=120;
       //lb_httpPort.Visible:=False;


       ed_httpPort:=TEdit.Create(myPage);
       ed_httpPort.Parent:=myPage.Surface;
       ed_httpPort.Left:=ed_serverHost.Left;
       ed_httpPort.Top:= lb_httpPort.Top;
       ed_httpPort.Text:='80';
       //ed_httpPort.Visible:=False;

end;



procedure CurStepChanged(CurStep: TSetupStep);
var  sampleFile,serverFile,OldString,NewString :string;
     fileLines: TArrayOfString;
     i: Integer;
     httpSampleFile,httpFile :string;
     
     dbServiceParams :string;
     ErrorCode: Integer;

     dbport:string;

  begin
  //安装完成,执行配置文件及服务创建
  if CurStep=ssPostInstall then
   begin
    //server配置信息
    sampleFile:= ExpandConstant('{app}\server\server-original.xml');
    serverFile:= ExpandConstant('{app}\server\server.xml');
    dbport:=ed_databasePort.Text;
     
    LoadStringsFromFile(sampleFile, fileLines); 
    
    //host
    OldString:='[host]';  
    NewString:= ed_serverHost.Text; 
    for i:= 0 to GetArrayLength(fileLines)-1 do 
     if (Pos(OldString, fileLines[i]) > 0) then 
      StringChange(fileLines[i], OldString, NewString); 

    //port
    OldString:='[port]';  
    NewString:= ed_serverPort.Text; 
    for i:= 0 to GetArrayLength(fileLines)-1 do 
     if (Pos(OldString, fileLines[i]) > 0) then 
      StringChange(fileLines[i], OldString, NewString); 

     //datahost
    OldString:='[datahost]';  
    NewString:= ed_databaseHost.Text; 
    for i:= 0 to GetArrayLength(fileLines)-1 do 
     if (Pos(OldString, fileLines[i]) > 0) then 
      StringChange(fileLines[i], OldString, NewString); 

     //dataport
    OldString:='[dataport]';  
    NewString:= ed_databasePort.Text; 
    for i:= 0 to GetArrayLength(fileLines)-1 do 
     if (Pos(OldString, fileLines[i]) > 0) then 
      StringChange(fileLines[i], OldString, NewString); 

     //httpenable
    OldString:='[httpenable]';
    if  ck_HTTP.Checked then
      NewString:= 'true' 
    else
      NewString:= 'false';

    for i:= 0 to GetArrayLength(fileLines)-1 do 
     if (Pos(OldString, fileLines[i]) > 0) then 
      StringChange(fileLines[i], OldString, NewString); 
  
    SaveStringsToUTF8File(serverFile, fileLines, False);  
    
    //http server conf
    //server配置信息
    httpSampleFile:= ExpandConstant('{app}\server\conf\app-original.conf');
    httpFile:= ExpandConstant('{app}\server\conf\app.conf');
    LoadStringsFromFile(httpSampleFile, fileLines);

     //datahost
    OldString:='[databasehost]';  
    NewString:= ed_databaseHost.Text; 
    for i:= 0 to GetArrayLength(fileLines)-1 do 
     if (Pos(OldString, fileLines[i]) > 0) then 
      StringChange(fileLines[i], OldString, NewString); 

     //dataport
    OldString:='[databaseport]';  
    NewString:= ed_databasePort.Text; 
    for i:= 0 to GetArrayLength(fileLines)-1 do 
     if (Pos(OldString, fileLines[i]) > 0) then 
      StringChange(fileLines[i], OldString, NewString);
    
    //httpport
    OldString:='[httpport]';  
    NewString:= ed_httpPort.Text; 
    for i:= 0 to GetArrayLength(fileLines)-1 do 
     if (Pos(OldString, fileLines[i]) > 0) then 
      StringChange(fileLines[i], OldString, NewString);   
    
    SaveStringsToUTF8File(httpFile, fileLines, False);
    
    
    //系统服务安装
    if not ShellExec('open', ExpandConstant('{app}\server\{#MyAppExeName}'),'install', ExpandConstant('{app}\server'), SW_HIDE, ewWaitUntilTerminated, ErrorCode) then
     begin
       MsgBox('主服务service加载失败,请安装后通过""{app}\server\{#MyAppExeName} install""进行加载.',mbInformation,MB_OK);
     end;

    //数据库服务
    if IsComponentSelected('database') then
      begin
        dbServiceParams := '--install --serviceName {#ServiceName_database} --serviceDisplayName "DQS MongoDB" --dbpath "'+ExpandConstant('{app}\data')+'" --logpath "'+ExpandConstant('{app}\data\logs\mongodb.log')+'" --directoryperdb';
        //MsgBox(dbServiceParams,mbInformation,MB_OK);
        if ShellExec('open', ExpandConstant('{app}\database\bin\mongod.exe'),dbServiceParams, ExpandConstant('{app}\database\bin'), SW_HIDE, ewWaitUntilTerminated, ErrorCode) then 
         begin
          if  ShellExec('','net.exe', 'start {#ServiceName_database}',ExpandConstant('{app}'), SW_HIDE, ewWaitUntilTerminated, ErrorCode) then
            begin
            //初始化数据库数据
                ShellExec('open', ExpandConstant('{app}\database\bin\mongoimport.exe'),'--port '+dbport+' -d dqs -c user "'+ExpandConstant('{app}\data\init-user.json')+'"', ExpandConstant('{app}\database\bin'), SW_HIDE, ewWaitUntilTerminated, ErrorCode);
                ShellExec('open', ExpandConstant('{app}\database\bin\mongoimport.exe'),'--port '+dbport+' -d dqs -c device "'+ExpandConstant('{app}\data\init-device.json')+'"', ExpandConstant('{app}\database\bin'), SW_HIDE, ewWaitUntilTerminated, ErrorCode);
                ShellExec('','net.exe', 'start {#ServiceName_server}',ExpandConstant('{app}'), SW_HIDE, ewWaitUntilTerminated, ErrorCode);
             //删除初始化脚本

            end;
         end
        else
          begin
          MsgBox(SysErrorMessage(ErrorCode),mbInformation,MB_OK);
          end;
      end;
    

    end;

  end;

//判断系统是否已安装
function InitializeSetup():Boolean; 
var appNotExist : boolean;  
begin  
  appNotExist:=true;  
  if RegKeyExists(HKLM,'SOFTWARE\{#RegisterName}') then   
  begin   
  MsgBox('本机已存在该程序,请先停止服务并卸载后再安装',mbInformation,MB_OK);
  appNotExist := false;
  end;   
  Result:= appNotExist
end;

// 卸载检查
function InitializeUninstall():Boolean;
//进程ID
var appWnd: HWND;
begin
  Result := true;
  //根据窗体名字获取进程ID
  appWnd := FindWindowByWindowName('县市地震烈度速报系统管理器');
  if (appWnd <> 0) then
     begin
      //进程存在，
      if MsgBox('系统管理器正在运行,确定进行卸载?', mbConfirmation, MB_YESNO) = IDYES then
        begin
          PostMessage(appWnd, 18, 0, 0);       // quit
        end 
      else
        begin
         Result := false;
        end;
      end;
end;
